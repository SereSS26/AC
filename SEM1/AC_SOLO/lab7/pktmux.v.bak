module pktmux(
  input pad_pkt,
  input zero_pkt,
  input mgln_pkt,
  input [63:0]msg_len,
  input [63:0]pkt,
  output reg [63:0]pkt_out
  );
  
always @(*) begin
    if(pad_pkt) begin
      pkt_out=64'h1000000000000000;
  end
else
  if(zero_pkt) begin
     pkt_out=64'h0000000000000000;
  end
else
  if(mgln_pkt) begin
    pkt_out=msg_len;
  end
else 
begin
  pkt_out=pkt;
end    
end
endmodule

`timescale 1ns/1ps

module pktmux_tb;
  reg pad_pkt;
  reg zero_pkt;
  reg mgln_pkt;
  reg [63:0]msg_len;
  reg [63:0]pkt;
  wire [63:0]pkt_out;
  
  pktmux uut(
    .pad_pkt(pad_pkt),
    .zero_pkt(zero_pkt),
    .mgln_pkt(mgln_pkt),
    .msg_len(msg_len),
    .pkt(pkt),
    .pkt_out(pkt_out)
    );
    
task urand64(output reg [63:0] r);
  begin
     r[63:32] = $urandom;
    r[31:0] = $urandom;
    end
endtask

  
  

initial begin
  pad_pkt = 0;
  zero_pkt = 0;
  mgln_pkt = 0;
  urand64(msg_len);
  urand64(pkt); 
  
    #100;
    pad_pkt = 1; 
    #100;
    pad_pkt = 0;
    zero_pkt = 1; 
    #100;
    zero_pkt = 0;
    mgln_pkt = 1; 
    #100;
    mgln_pkt = 0;
        
  
    $finish;
    end
endmodule
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  