module regfl(
  input clk,
  input rst_b,
  input we,
  input [2:0]s,
  input [63:0]d,
  output reg [511:0]q
);
  
reg [63:0] reg_file[7:0];
integer i;

always @(posedge clk or negedge rst_b) begin
  if(rst_b==0) begin
    for(i =0;i<8;i=i+1)
      reg_file[i] <= 64'h0;
    end
  else
    if(we) begin
      reg_file[s]<=d;
    end
  end
  
  always@(*) begin
    q={reg_file[0],reg_file[1],reg_file[2],reg_file[3],reg_file[4],reg_file[5],reg_file[6],reg_file[7]};
    
  end
  
endmodule

module pktmux(
  input pad_pkt,
  input zero_pkt,
  input mgln_pkt,
  input [63:0]msg_len,
  input [63:0]pkt,
  output reg [63:0]pkt_out
  );
  
always @(*) begin
    if(pad_pkt) begin
      pkt_out=64'h1000000000000000;
  end
else
  if(zero_pkt) begin
     pkt_out=64'h0000000000000000;
  end
else
  if(mgln_pkt) begin
    pkt_out=msg_len;
  end
else 
begin
  pkt_out=pkt;
end    
end
endmodule

module rgst #(
    parameter w=8
)(
    input clk, rst_b, ld, clr, input [w-1:0] d, output reg [w-1:0] q
);
    always @ (posedge clk, negedge rst_b)
        if (!rst_b)                 q <= 0;
        else if (clr)               q <= 0;
        else if (ld)                q <= d;
endmodule


module cntr #(parameter w=8)(
    input clk, rst_b, c_up, clr, output reg [w-1:0] q
);
    always @ (posedge clk, negedge rst_b)
        if (!rst_b)					q <= 0;
        else if (c_up)				q <= q+1;
        else if (clr)				q <= 0;
endmodule

module add_64 (
    input [63:0] a,  
    input [63:0] b,   
    output reg [63:0] sum
);

    always@(*) begin
     sum = a + b;  
   end  

endmodule



module sha2indpath(
  input clk,
  input rst_b,
  input clr,
  input st_pkt,
  input pad_pkt,
  input zero_pkt,
  input mgln_pkt,
  input [63:0]pkt,
  input [63:0]msg_len,
  output reg [3:0]idx,
  output reg [511:0]blk
  );
  
  wire [63:0] pktmux_out;       // Iesirea din pktmux
  wire [63:0] rgst_q;           // Iesirea din rgst
  wire [511:0] regfl_q;         // Iesirea din regfl
  wire [2:0] cntr_q;            // Iesirea din cntr
  wire n_or;
  wire aux;
  assign n_or=~(pad_pkt|zero_pkt|mgln_pkt);
  assign aux=n_or & st_pkt; 
    
    add_64 add_64bit (
        .a(rgst_q),
        .b(msg_len),
        .sum(sum)
      );
    
    pktmux pkt_mux (
        .pkt(pkt), 
        .msg_len(rgst_q), 
        .pad_pkt(pad_pkt), 
        .zero_pkt(zero_pkt), 
        .mgln_pkt(mgln_pkt), 
        .pkt_out(pktmux_out)
    );

    rgst #(64) rgst_64 (
        .clk(clk), 
        .rst_b(rst_b), 
        .ld(aux),            
        .clr(clr),              
        .d(sum),        
        .q(rgst_q)
    );

    cntr #(3) cntr_idx (
        .clk(clk), 
        .rst_b(rst_b), 
        .c_up(st_pkt),          
        .clr(clr),              
        .q(cntr_q)
    );

    regfl regfl_blk (
        .clk(clk), 
        .rst_b(rst_b), 
        .we(st_pkt),            
        .d(pktmux_out),             
        .s(cntr_q),             
        .q(regfl_q)
    );

    always@(*) begin
     idx = cntr_q;         
     blk = regfl_q;   
   end     

endmodule
  
  
  
`timescale 1ns/1ps

module sha2indpath_tb;
  reg clk;
  reg rst_b;
  reg clr;
  reg st_pkt;
  reg pad_pkt;
  reg zero_pkt;
  reg mgln_pkt;
  reg [63:0] pkt;
  reg [63:0] msg_len;
  wire [3:0] idx;
  wire [511:0] blk;

sha2indpath uut (
  .clk(clk),
  .rst_b(rst_b),
  .clr(clr),
  .st_pkt(st_pkt),
  .pad_pkt(pad_pkt),
  .zero_pkt(zero_pkt),
  .mgln_pkt(mgln_pkt),
  .pkt(pkt),
  .msg_len(msg_len),
  .idx(idx),
  .blk(blk)
  );
  
  
  task urand64(output reg [63:0] r);
        begin
            r[63:32] = $urandom;  
            r[31:0] = $urandom;   
        end
    endtask
initial begin
    urand64(pkt);
    end
  

initial begin
clk=0;
end
always begin
#50 clk=~clk;
  end

  


initial begin
    msg_len=0;
  end

initial begin
    clr=0;
    #200 clr=1;
    #100 clr=0;
end
    
initial begin
  st_pkt=1;
  #800 st_pkt=0;
  #100 st_pkt=1;
end
    
initial begin
    pad_pkt=0;
    #900 pad_pkt=1;
    #100 pad_pkt=0;
  end
    
initial begin
    zero_pkt=0;
    #1000 zero_pkt=1;
    #100 zero_pkt=0;
end
    
initial begin
    mgln_pkt=0;
    #1100 mgln_pkt=1;
    #100 mgln_pkt=0;
    end


endmodule
  
  