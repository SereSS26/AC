module regfl_4x8(
  input clk,
  input rst_b,
  input [7:0]wr_data,
  input [1:0]wr_addr,
  input wr_e,
  output reg [7:0]rd_data,
  input [1:0]rd_addr
  );
  
  wire [7:0]q0,q1,q2,q3;
  
  wire [3:0]ld;
  
  module rgst #(
    parameter w=8
)(
    input clk, rst_b, ld, clr, input [w-1:0] d, output reg [w-1:0] q
);
    always @ (posedge clk, negedge rst_b)
        if (!rst_b)                 q <= 0;
        else if (clr)               q <= 0;
        else if (ld)                q <= d;
endmodule

module decoder_1to4 (
    input [1:0] addr,    
    input enable,        
    output reg [3:0] out      
);

always @(*) begin
    if (enable) begin
        case (addr)
          2'b00: out = 4'b0001;  
          2'b01: out = 4'b0010;  
          2'b10: out = 4'b0100;  
          2'b11: out = 4'b1000;  
        endcase
        end else begin
            out = 4'b0000;  
      end
  end

endmodule

  decoder_1to4 decoder(
    .addr(wr_addr),
    .enable(wr_e),
    .out(ld)
    );
    
    rgst #(8) reg0(
     .clk(clk),
     .rst_b(rst_b),
     .ld(ld[0]),
     .clr(1'b0),
     .d(wr_data),
     .q(q0)
    );
  
  rgst #(8) reg1 (
    .clk(clk),
    .rst_b(rst_b),
    .ld(ld[1]),              
    .clr(1'b0),
    .d(wr_data),
    .q(q1)
    );
    
   rgst #(8) reg2 (
     .clk(clk),
     .rst_b(rst_b),
     .ld(ld[2]),              
     .clr(1'b0),
     .d(wr_data),
     .q(q2)
    ); 
    
    rgst #(8) reg3 (
      .clk(clk),
      .rst_b(rst_b),
      .ld(ld[3]),              
      .clr(1'b0),
      .d(wr_data),
      .q(q3)
    );
    
always @(*) begin
  case (rd_addr)
      2'b00: rd_data=q0;
      2'b01: rd_data=q1;
      2'b10: rd_data=q2;
      2'b11: rd_data=q3; 
    endcase
end  
  endmodule
  
`timescale 1ns/1ps

module regfl_4x8_tb;
  reg clk;
  reg rst_b;
  reg [7:0] wr_data;
  reg [1:0] wr_addr;
  reg wr_e;
  reg [1:0] rd_addr;
  wire [7:0] rd_data;

  regfl_4x8 uut (
    .clk(clk),
    .rst_b(rst_b),
    .wr_data(wr_data),
    .wr_addr(wr_addr),
    .wr_e(wr_e),
    .rd_addr(rd_addr),
    .rd_data(rd_data)
    );

    always begin
        #50 clk = ~clk; 
    end

  initial begin
    clk = 0;
    rst_b = 0;
    wr_e = 0;
    wr_addr = 2'b00;
    wr_data = 8'h00;
    rd_addr = 2'b00;   
    #5;
    rst_b = 1;   
  end
  initial begin    
    wr_addr = 2'h0; 
    #100 wr_addr = 2'h2;
    #100 wr_addr = 2'h1;
    #100 wr_addr = 2'h3;
    #100 wr_addr = 2'h0;
    #100 wr_addr = 2'h1;
    #100 wr_addr = 2'h3;
    #100 wr_addr = 2'h2;
    #100 wr_addr = 2'h3;
end
initial begin  
    wr_data = 8'ha2; 
    #100 wr_data = 8'h2e;
    #100 wr_data = 8'h98;
    #100 wr_data = 8'h55;
    #100 wr_data = 8'h20;
    #100 wr_data = 8'hff;
    #100 wr_data = 8'hc7;
    #100 wr_data = 8'hb5;
    #100 wr_data = 8'h91;
  end
    initial begin  
    wr_e=1;
    #200 wr_e=0;
    #100 wr_e=1;
    #400 wr_e=0;
    #100 wr_e=1;
     end
     initial begin   
    rd_addr = 2'h3; 
    #100 rd_addr = 2'h0;
    #100 rd_addr = 2'h1;
    #100 rd_addr = 2'h2;
    #100 rd_addr = 2'h0;
    #100 rd_addr = 2'h3;
    #100 rd_addr = 2'h1;
    #100 rd_addr = 2'h2;
    #100 rd_addr = 2'h3;
  end
    
  initial begin
    #10000;
    $stop;
  end  

endmodule
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    