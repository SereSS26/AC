module regfl_4x8 (
    input wire clk,              // Semnal de ceas
    input wire rst_b,            // Reset asincron, activ la 0
    input wire [7:0] wr_data,    // Datele de scriere
    input wire [1:0] wr_addr,    // Adresa pentru scriere (selecteaz? unul din cele 4 registre)
    input wire wr_e,             // Semnal de activare a scrierii
    output wire [7:0] rd_data,   // Datele citite din registrul selectat
    input wire [1:0] rd_addr     // Adresa pentru citire (selecteaz? unul din cele 4 registre)
);

    // Semnalele interne pentru ie?irile fiec?rui registru
    wire [7:0] q0, q1, q2, q3;

    // Semnalul de activare pentru fiecare registru (ld0, ld1, ld2, ld3)
    wire [3:0] ld;

    // Instan?ierea decodorului 1-out-of-4
    decoder_1to4 decoder (
        .addr(wr_addr),  // Adresa de scriere (2 bi?i)
        .enable(wr_e),   // Semnalul de activare a scrierii
        .out(ld)         // Semnalele de înc?rcare pentru fiecare registru
    );

    // Instan?ierea celor 4 registre de 8-bi?i folosind modulul rgst
    rgst #(8) reg0 (
        .clk(clk),
        .rst_b(rst_b),
        .ld(ld[0]),              // Înc?rcare activ? pentru registrul 0
        .clr(1'b0),              // Nu folosim semnalul de clear (?tergere)
        .d(wr_data),             // Datele de scriere
        .q(q0)                   // Ie?irea din registrul 0
    );

    rgst #(8) reg1 (
        .clk(clk),
        .rst_b(rst_b),
        .ld(ld[1]),              // Înc?rcare activ? pentru registrul 1
        .clr(1'b0),
        .d(wr_data),
        .q(q1)
    );

    rgst #(8) reg2 (
        .clk(clk),
        .rst_b(rst_b),
        .ld(ld[2]),              // Înc?rcare activ? pentru registrul 2
        .clr(1'b0),
        .d(wr_data),
        .q(q2)
    );

    rgst #(8) reg3 (
        .clk(clk),
        .rst_b(rst_b),
        .ld(ld[3]),              // Înc?rcare activ? pentru registrul 3
        .clr(1'b0),
        .d(wr_data),
        .q(q3)
    );

    // Multiplexor pentru citirea valorilor din unul dintre cele 4 registre, pe baza rd_addr
    // Citirea este mereu activ?, f?r? nevoie de semnal de activare
    always @(*) begin
        case (rd_addr)
            2'b00: rd_data = q0;
            2'b01: rd_data = q1;
            2'b10: rd_data = q2;
            2'b11: rd_data = q3;
            default: rd_data = 8'b0; // Default case, de siguran??
        endcase
    end
endmodule

